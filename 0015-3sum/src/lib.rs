use std::collections::{HashSet, HashMap};

pub struct Solution {}

impl Solution {
    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let len = nums.len();
        let mut answers = vec![];

        let mut processed_values: HashSet<i32> = HashSet::new();
        let mut count_by_value: HashMap<&i32, i32> = HashMap::new();

        // Create a HashMap<value, count>
        for n in &nums {
            let count = count_by_value.entry(n).or_insert(0);
            *count += 1;
        }

        for i in 0..len {
            if processed_values.contains(&nums[i]) {
                // the value has been processed
                continue;
            }
            processed_values.insert(nums[i]);
            let mut processed_values_for_2nd_index: HashSet<i32> = HashSet::new();
            for j in i + 1..len {
                if processed_values_for_2nd_index.contains(&nums[j]) {
                    // the value has been processed
                    continue;
                }
                processed_values_for_2nd_index.insert(nums[j]);

                let target_value = (nums[i] + nums[j]) * -1;
                // we have the value that the answer is 0
                if count_by_value.get(&target_value).is_some() {
                    let mut candidates = vec![nums[i], nums[j], target_value];

                    // create a HashMap<value, count> for the answer
                    let mut count_by_candidate_value: HashMap<&i32, i32> = HashMap::new();
                    for candidate in &candidates {
                        let count = count_by_candidate_value.entry(candidate).or_insert(0);
                        *count += 1;
                    }

                    if Solution::is_valid(&count_by_candidate_value, &count_by_value) {
                        candidates.sort();
                        if Solution::is_duplicated(&answers, &candidates) == false {
                            answers.push(candidates);
                        }
                    }
                }
            }
        }
        answers
    }
    fn is_valid(count_by_candidate_value: &HashMap<&i32, i32>, count_by_value: &HashMap<&i32, i32>) -> bool {
        count_by_candidate_value.iter().all(|(value, count)| {
            match count_by_value.get(value) {
                Some(limit_count) => count <= limit_count,
                None => true
            }
        })
    }
    fn is_duplicated(answers: &Vec<Vec<i32>>, candidates: &Vec<i32>) -> bool {
        answers.iter().any(|answer| answer.iter().enumerate().all(|(i, &a)| &a == &candidates[i]))
    }
}



#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn exampl1() {
        assert_eq!(
            Solution::three_sum(
                vec![-1, 0, 1, 2, -1, -4]
            ),
            vec![
                vec![-1, 0, 1],
                vec![-1, -1, 2]
            ]
        );
    }

    #[test]
    fn exampl2() {
        assert_eq!(
            Solution::three_sum(
                vec![82597,-9243,62390,83030,-97960,-26521,-61011,83390,-38677,12333,75987,46091,83794,19355,-71037,-6242,-28801,324,1202,-90885,-2989,-95597,-34333,35528,5680,89093,-90606,50360,-29393,-27012,53313,65213,99818,-82405,-41661,-3333,-51952,72135,-1523,26377,74685,96992,92263,15929,5467,-99555,-43348,-41689,-60383,-3990,32165,65265,-72973,-58372,12741,-48568,-46596,72419,-1859,34153,62937,81310,-61823,-96770,-54944,8845,-91184,24208,-29078,31495,65258,14198,85395,70506,-40908,56740,-12228,-40072,32429,93001,68445,-73927,25731,-91859,-24150,10093,-60271,-81683,-18126,51055,48189,-6468,25057,81194,-58628,74042,66158,-14452,-49851,-43667,11092,39189,-17025,-79173,13606,83172,92647,-59741,19343,-26644,-57607,82908,-20655,1637,80060,98994,39331,-31274,-61523,91225,-72953,13211,-75116,-98421,-41571,-69074,99587,39345,42151,-2460,98236,15690,-52507,-95803,-48935,-46492,-45606,-79254,-99851,52533,73486,39948,-7240,71815,-585,-96252,90990,-93815,93340,-71848,58733,-14859,-83082,-75794,-82082,-24871,-15206,91207,-56469,-93618,67131,-8682,75719,87429,-98757,-7535,-24890,-94160,85003,33928,75538,97456,-66424,-60074,-8527,-28697,-22308,2246,-70134,-82319,-10184,87081,-34949,-28645,-47352,-83966,-60418,-15293,-53067,-25921,55172,75064,95859,48049,34311,-86931,-38586,33686,-36714,96922,76713,-22165,-80585,-34503,-44516,39217,-28457,47227,-94036,43457,24626,-87359,26898,-70819,30528,-32397,-69486,84912,-1187,-98986,-32958,4280,-79129,-65604,9344,58964,50584,71128,-55480,24986,15086,-62360,-42977,-49482,-77256,-36895,-74818,20,3063,-49426,28152,-97329,6086,86035,-88743,35241,44249,19927,-10660,89404,24179,-26621,-6511,57745,-97160,-97822,-49979,52307,79462,94273,-24808,77104,9255,-83057,77655,21361,55956,-9096,48599,-40490,-55107,2689,29608,20497,66834,-34678,23553,-81400,-66630,-96321,-34499,-12957,-20564,25610,-4322,-58462,20801,53700,71527,24669,-54534,57879,-3221,33636,3900,97832,-27688,-98715,5992,24520,-55401,-57613,-69926,57377,-77610,20123,52174,860,60429,-91994,-62403,-6218,-90610,-37263,-15052,62069,-96465,44254,89892,-3406,19121,-41842,-87783,-64125,-56120,73904,-22797,-58118,-4866,5356,75318,46119,21276,-19246,-9241,-97425,57333,-15802,93149,25689,-5532,95716,39209,-87672,-29470,-16324,-15331,27632,-39454,56530,-16000,29853,46475,78242,-46602,83192,-73440,-15816,50964,-36601,89758,38375,-40007,-36675,-94030,67576,46811,-64919,45595,76530,40398,35845,41791,67697,-30439,-82944,63115,33447,-36046,-50122,-34789,43003,-78947,-38763,-89210,32756,-20389,-31358,-90526,-81607,88741,86643,98422,47389,-75189,13091,95993,-15501,94260,-25584,-1483,-67261,-70753,25160,89614,-90620,-48542,83889,-12388,-9642,-37043,-67663]
            ),
            vec![vec![-41689, -40908, 82597], vec![-31358, -26521, 57879], vec![-86931, 19355, 67576], vec![-91994, -6242, 98236], vec![-29078, -28801, 57879], vec![-58628, -28801, 87429], vec![-90606, 1202, 89404], vec![-20564, -2989, 23553], vec![-95597, -3990, 99587], vec![-95597, -1859, 97456], vec![-67261, -27012, 94273], vec![-96770, 43457, 53313], vec![-79254, -20564, 99818], vec![-40007, -34678, 74685], vec![-77610, 34153, 43457], vec![-56469, -6468, 62937], vec![-54944, -36046, 90990], vec![-49851, -20655, 70506], vec![-58118, -12388, 70506], vec![-87359, -12228, 99587], vec![-40072, -8527, 48599], vec![-40072, 15086, 24986], vec![-58118, 25689, 32429], vec![-99851, 10093, 89758], vec![-18126, -15802, 33928], vec![-40007, -6468, 46475], vec![-15816, -9241, 25057], vec![-49482, -43667, 93149], vec![-36675, -17025, 53700], vec![-59741, 19343, 40398], vec![-59741, -27688, 87429], vec![-87672, 1637, 86035], vec![-70819, -9241, 80060], vec![-45606, -25921, 71527], vec![-75189, 35241, 39948], vec![-97425, 25610, 71815], vec![-36714, -7535, 44249], vec![-54534, -7535, 62069], vec![-82319, 24986, 57333], vec![-37043, -10184, 47227], vec![-86931, -6218, 93149], vec![-42977, -34678, 77655], vec![-91994, 25160, 66834]]
        )
    }
}
